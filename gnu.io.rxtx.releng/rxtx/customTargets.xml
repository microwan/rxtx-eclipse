<project name="Build specific targets and properties" default="noDefault" basedir=".">

<property name="postingDirectory" value="${buildDirectory}" />
	
<!-- ===================================================================== -->
<!-- Run a given ${target} on all elements being built -->
<!-- ===================================================================== -->
<target name="allElements">
	<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="gnu.io.rxtx.sdk" />
	</ant>
	<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="gnu.io.rxtx" />
	</ant>
</target>

<!-- ===================================================================== -->
<!-- Targets to assemble the built elements for particular configurations  -->
<!-- These generally call the generated assemble scripts (named in -->
<!-- ${assembleScriptName}) but may also add pre and post processing -->
<!-- Add one target for each root element and each configuration -->
<!-- ===================================================================== -->

	<target name="assemble.gnu.io.rxtx.group.group.group">
		<property name="archiveName" value="RXTX-runtime-${buildId}.zip"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble.gnu.io.rxtx.sdk.group.group.group">
		<property name="archiveName" value="RXTX-SDK-${buildId}.zip"/>
		<antcall target="assemble" />
	</target>

	<target name="assemble">
		<property name="archiveFullPath" value="${buildDirectory}/${buildLabel}/${archiveName}" />
		<ant antfile="${assembleScriptName}" />
	</target>

	<target name="postPackage">
		<mkdir dir="${buildDirectory}/${buildLabel}/checksum"/>
<!--
		<exec executable="sh" dir="${buildDirectory}/${buildLabel}">
			<arg line="${eclipse.build.configs}/../../extras//produceChecksum" />
		</exec>
-->
		<move todir="${postingDirectory}/${buildLabel}">
			<fileset dir="${buildDirectory}/${buildLabel}" />
		</move>
	</target>

<!-- ===================================================================== -->
<!-- Check out map files from correct repository -->
<!-- Replace values for cvsRoot, package and mapVersionTag as desired. -->
<!-- ===================================================================== -->
	<target name="checkLocal">
		<available property="mapsLocal" file="${buildDirectory}/maps/gnu.io.rxtx.releng" />
	</target>

	<target name="getMapFiles" depends="checkLocal" unless="mapsLocal">
		<!-- ***  change the repo info -->
		<property name="mapCvsRoot" value=":pserver:mober@talia:/export1/data/cvsroot/mober" />
		<echo message="buildDirectory=${buildDirectory}"/>
		<!--
		<property name="mapVersionTag" value="HEAD" />
		<echo message="mapVersionTag=${mapVersionTag}"/>
		tag="${mapVersionTag}"
		<cvs cvsRoot="${mapCvsRoot}"
			package="rxtx/gnu.io.rxtx.releng"
			dest="${buildDirectory}/maps"
		/>
		<move file="${buildDirectory}/maps/rxtx/gnu.io.rxtx.releng/maps" todir="${buildDirectory}/maps"/>
		-->
		<copy todir="${buildDirectory}/maps">
		    <fileset dir="${eclipse.build.configs}/../maps"/>
		</copy>

		<!--tag the map files project-->
		<!--
		<antcall target="tagMapFiles" />
		<antcall target="getPrebuiltElements" />
		-->
	</target>

	<target name="compareMapFiles" if="compareMaps">
		<property file="${mapTag.properties}"/>
		<property name="cvsDiffFile" value="${buildDirectory}/cvsDiff.txt" />
		<cvs cvsRoot="${mapCvsRoot}" dest="${buildDirectory}/maps" command="diff -w -r ${lastMapTag}" output="${cvsDiffFile}" />
		<modifiedMaps mapDiffFile="${cvsDiffFile}" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<!-- Stores tag on the filesystem so map files can be compared -->
		<echo file="${mapTag.properties}">
			lastMapTag=${buildId}
		</echo>
		<cvs dest="${buildDirectory}/maps/gnu.io.rxtx.releng" command="tag ${buildId}" />
	</target>

	<target name="getPrebuiltElements">
		<generateBaseFetchScript
			mapfile="${buildDirectory}/maps/gnu.io.rxtx.releng/maps/rxtx.map"
			outputfile="${buildDirectory}/fetchbase.xml"/>
		<ant antfile="${buildDirectory}/fetchbase.xml" />
	</target>

<!-- ===================================================================== -->
<!-- Steps to do before setup -->
<!-- ===================================================================== -->
<target name="preSetup">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after setup but before starting the build proper -->
<!-- ===================================================================== -->
<target name="postSetup">
</target>

<!-- ===================================================================== -->
<!-- Steps to do before fetching the build elements -->
<!-- ===================================================================== -->
<target name="preFetch">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after the fetch -->
<!-- ===================================================================== -->
<target name="postFetch">
</target>

<!-- ===================================================================== -->
<!-- Steps to do before generating build scripts -->
<!-- ===================================================================== -->
<target name="preGenerate">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after generating the build scripts -->
<!-- ===================================================================== -->
<target name="postGenerate">
	<!-- <antcall target="clean" /> -->
</target>


<!-- ===================================================================== -->
<!-- Steps to do before assembling -->
<!-- ===================================================================== -->
<target name="preAssemble">
</target>

<!-- ===================================================================== -->
<!-- Steps to do after assembling-->
<!-- ===================================================================== -->
<target name="postAssemble">
</target>

<!-- ===================================================================== -->
<!-- Steps to do before running the build.xmls for the elements being built. -->
<!-- ===================================================================== -->
<target name="preProcess">
	<replace dir="${buildDirectory}/plugins" value="${buildId}" token="@build@">
		<include name="**/about.mappings" />
	</replace>
</target>

<!-- ===================================================================== -->
<!-- Steps to do after running the build.xmls for the elements being built. -->
<!-- ===================================================================== -->
<target name="postProcess">
	<condition property="logsAvailable">
		<istrue value="${javacVerbose}"/> 
	</condition>
	<antcall target="gatherLogs" />
</target>

<target name="prePackage" />
	

<!-- ===================================================================== -->
<!-- Steps to do after everything is built and assembled -->
<!-- (e.g., testing, posting, emailing, ...) -->
<!-- ===================================================================== -->
<target name="postBuild">
</target>

<!-- ===================================================================== -->
<!-- Helper targets -->
<!-- ===================================================================== -->
<target name="gatherLogs" if="logsAvailable">
	<mkdir dir="${postingDirectory}/${buildLabel}/compilelogs" />
	<antcall target="allElements">
		<param name="target" value="gatherLogs" />
	</antcall>

	<unzip dest="${postingDirectory}/${buildLabel}/compilelogs" overwrite="true">
		<fileset dir="${buildDirectory}/features/org.eclipse.jdt">
			<include name="*.log.zip" />
		</fileset>
	</unzip>
</target>
<target name="clean" unless="noclean">
	<antcall target="allElements">
		<param name="target" value="cleanElement" />
	</antcall>
</target>
<!-- ===================================================================== -->
<!-- Default target                                                        -->
<!-- ===================================================================== -->
<target name="noDefault">
	<echo message="You must specify a target when invoking this file" />
</target>

</project>
